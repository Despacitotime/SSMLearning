<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--在java文件中只读取总的beans.xml文件。
    import一般用于团队开发使用，他可以将多个配置文件导入合并为一个。
    总的一般命名为：applicationContext.xml-->
    <import resource="beans.xml"/>
    <import resource="bean2.xml"/>
    <!--DataSource：使用Spring的数据源替换Mybatis的配置 c3p0 dbcp druid
       class使用spring提供的jdbc：org.springframework.jdbc.datasource-->
    <import resource="spring-dao.xml"/>

    <!--AOP使用的日之类-->
    <bean id="AfterLog" class="AOP.log.AfterLog"/>
    <bean id="log" class="AOP.log.Log"/>

    <!--方法一：使用原生Spring API接口-->
    <!--配置aop：需要导入aop的约束-->
    <aop:config>
        <!--切入点：expression是一个表达式,execution()里面放要执行的位置，5个值，中间用空格隔开-->
        <aop:pointcut id="pointcut" expression="execution(* AOP.service.impl.UserServiceImpl.*(..))"/>
        <!--执行环绕增加-->
        <!--将log类和AfterLog类切入到pointcut该方法上-->
        <aop:advisor advice-ref="log" pointcut-ref="pointcut"/>
        <aop:advisor advice-ref="AfterLog" pointcut-ref="pointcut"/>
    </aop:config>

    <!--方式二：自定义类-->
    <bean id="diy" class="AOP.log.DiyPointCut"/>
    <aop:config>
        <!--自定义切面，ref要引用的类-->
        <aop:aspect ref="diy">
            <!--切入点-->
            <aop:pointcut id="point" expression="execution(* AOP.service.impl.UserServiceImpl.*(..))"/>
            <!--通知-->
            <aop:before method="before" pointcut-ref="point"/>
            <aop:after method="after" pointcut-ref="point"/>
        </aop:aspect>
    </aop:config>

    <!--方式三：使用注解-->
    <bean id="annotationPointCut" class="AOP.log.AnnotationPointerCut"/>
    <!--开启注解支持，aspectj-autoproxy表自动代理-->
    <aop:aspectj-autoproxy/>
</beans>
